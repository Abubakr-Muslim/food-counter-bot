<?php

namespace App\Commands;

use App\Models\Customer;
use Carbon\Carbon;
use Exception;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\Commands\Command;
use Telegram\Bot\Exceptions\TelegramSDKException;

class MyProfileCommand extends Command
{
    protected string $name = 'myprofile';
    protected string $description = '–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è';

    public function handle(): void
    {
        $userId = null;
        $chatId = null;

        try {
            $update = $this->getUpdate();
            if (!$update?->getMessage()?->getChat()?->getId() || !$update?->getMessage()?->getFrom()?->getId()) {
                Log::warning("MyProfileCommand: Invalid update or missing chat/user ID.");
                return;
            }
            $chatId = $update->getMessage()->getChat()->getId();
            $userId = $update->getMessage()->getFrom()->getId();

            Log::info("MyProfileCommand: Initiated by User={$userId}.");

            $customer = Customer::where('tg_id', $userId)->first();

            if (!$customer) {
                Log::warning("MyProfileCommand: Customer not found for User={$userId}");
                $this->replyWithMessage([
                    'text' => '–Ø –Ω–µ –Ω–∞—à–µ–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.'
                ]);
                return;
            }

            $info = $customer->customerInfo()->latest()->first();

            if (!$info) {
                Log::warning("MyProfileCommand: CustomerInfo not found for User={$userId}");
                $this->replyWithMessage([
                    'text' => '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. üôÅ –ó–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–µ—Ä–µ–∑ /start.'
                ]);
                return;
            }

            Log::info("MyProfileCommand: User={$userId}. Profile data found.");

            $birthdateFormatted = $info->birthdate ? Carbon::parse($info->birthdate)->isoFormat('LL') : '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
            $weightFormatted = $info->weight ? $info->weight . ' –∫–≥' : '–ù–µ —É–∫–∞–∑–∞–Ω';
            $heightFormatted = $info->height ? $info->height . ' —Å–º' : '–ù–µ —É–∫–∞–∑–∞–Ω';

            $profileMessage = "<b>üìã –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n" .
                              "üéØ <b>–¶–µ–ª—å:</b> " . htmlspecialchars($info->goal ?? '–ù–µ —É–∫–∞–∑–∞–Ω–∞') . "\n" .
                              "üë§ <b>–ü–æ–ª:</b> " . htmlspecialchars($info->gender ?? '–ù–µ —É–∫–∞–∑–∞–Ω') . "\n" .
                              "üìÖ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> " . htmlspecialchars($birthdateFormatted) . "\n" .
                              "üèÉ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> " . htmlspecialchars($info->activity_level ?? '–ù–µ —É–∫–∞–∑–∞–Ω–∞') . "\n" .
                              "üìè <b>–†–æ—Å—Ç:</b> " . htmlspecialchars($heightFormatted) . "\n" .
                              "‚öñÔ∏è <b>–í–µ—Å:</b> " . htmlspecialchars($weightFormatted) . "\n\n" .
                              "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <i>/start</i>.";

            $this->sendMessage($chatId, $profileMessage, null, 'HTML');

            Log::info("MyProfileCommand: Finished for User={$userId}.");

        } catch (Exception $e) {
            Log::error("!!! MyProfileCommand FAILED !!!", [
                'user_id' => $userId ?? 'unknown',
                'error' => $e->getMessage(),
                'file' => $e->getFile(),
                'line' => $e->getLine(),
            ]);
            if ($chatId) {
                try {
                    $this->replyWithMessage(['chat_id' => $chatId, 'text' => '–û–π! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.']);
                } catch (Exception $sendError) {
                    Log::error("MyProfileCommand: Could not send error message...", ['send_error' => $sendError->getMessage()]);
                }
            }
        }
    }

    protected function sendMessage(int $chatId, string $text, ?array $replyMarkup = null, ?string $parseMode = null): void
    {
        try {
            $params = ['chat_id' => $chatId, 'text' => $text];
            if ($replyMarkup !== null) {
                $params['reply_markup'] = $replyMarkup;
            }
            if ($parseMode !== null) {
                $params['parse_mode'] = $parseMode;
            }
            $this->getTelegram()->sendMessage($params);
        } catch (TelegramSDKException $e) {
            Log::error("Failed to send message from MyProfileCommand to chat {$chatId}", ['error' => $e->getMessage()]);
        }
    }
}